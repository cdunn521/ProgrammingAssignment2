@@ -1,15 +1,48 @@
## Put comments here that give an overall description of what your
## functions do
## The following functions enable matrix inversion by caching the inverse of a matrix rather than computing it repeatedly.

## Write a short comment describing this function
## "makeCacheMatrix" creates a matrix object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {


        m <- NULL

        set <- function(y) {
                x <<- y
                m <<- NULL
        }

        get <- function() {
                x
        }

        setInverse <- function(inverse) {
                m <<- inverse
        }

        getInverse <- function() {
                m
        }

        list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}


## Write a short comment describing this function
## "cacheSolve" finds the inverse of the matrix that is returned by the "makeCacheMatrix" function; if the inverse has already 
## been cached, then the "cacheSolve" function will retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'

        m <- x$getInverse()

        if(!is.null(m)) {
                message("getting cached data")
                m
        }

        data <- x$get()
        m <- solve(data, ...)
        x$setInverse(m)
        m
